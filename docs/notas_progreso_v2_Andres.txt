-------------------11 de Junio de 2023

	Aplicar migraciones y seeders con la db vacia
		php artisan migrate --seed

	Logica de la pag de contactos
			ver **** http://www.videorockola.com/consultoria/

			1. php artisan make:migration create_contacts_table --create=contacts
			2. php artisan make:model Contacts/Contact
			3. php artisan make:controller Admin/Contacts/ContactController --resource
			4. php artisan make:seeder ContactsTableSeeder
			5. Agregar a database/seeds/DatabaseSeeder
			6. Se agragan las clases (Repositorios) de Contact en app/providers/RepositoryServiceProvider.php
					ContactRepositoryInterface
					ContactRepository

			7. en la vista views/front/contacto.blade.php 
					se colocaron los datos traidos de la db

					Los iconos de las redes sociales tocó agregarles el css manualmente
			8. No se creo el controlador de Front
			9. Ya funciona! 
			10. Como en el footer se utiliza los links de las redes sociales que estan en Contact.. y el footer se utiliza en todas las vistas, entonces contact se agrega a 
				app/providers/GlobalTemplateServiceProvider.php
			De esta manera los links de las redes sociales siempre los podra acceder el layout de footer

			11. php artisan migrate
			12. php artisan db:seed --class=ContactTableSeeder
	
	Eliminar cache
		php artisan cache:clear
			Solucion ERROR Failed to clear cache. Make sure you have the appropriate permissions.
				Crear la carpeta data
					project\storage\framework\cache\data
		php artisan config:clear
		php artisan config:cache

		php artisan cache:clear && php artisan config:clear && php artisan config:cache

	
	Error SQLSTATE[42S02]
		https://laravel.com/docs/5.8/eloquent#eloquent-model-conventions
	
	+-------------------------------+
	|  Resumen archivos modificados |
	+-------------------------------+
		modified:   docs/notas_progreso_v2_Andres.txt
        new file:   project/app/Http/Controllers/Admin/Contact/ContactController.php
        modified:   project/app/Http/Controllers/Front/HomeController.php
        new file:   project/app/Models/Contact/Contact.php
        new file:   project/app/Models/Contact/Exceptions/ContactInvalidArgumentException.php        
        new file:   project/app/Models/Contact/Exceptions/ContactNotFoundException.php
        new file:   project/app/Models/Contact/Repositories/ContactRepository.php
        new file:   project/app/Models/Contact/Repositories/Interfaces/ContactRepositoryInterface.php
        new file:   project/app/Models/Contact/Requests/CreateContactRequest.php
        new file:   project/app/Models/Contact/Requests/UpdateContactRequest.php
        new file:   project/app/Models/Contact/Transformations/ContactTransformable.php
        modified:   project/app/Providers/GlobalTemplateServiceProvider.php
        modified:   project/app/Providers/RepositoryServiceProvider.php
        new file:   project/database/migrations/2023_06_12_001355_create_contact_table.php
        new file:   project/database/seeders/ContactTableSeeder.php
        modified:   project/database/seeders/DatabaseSeeder.php
        new file:   project/resources/views/admin/contact/edit.blade.php
        new file:   project/resources/views/front/contact.blade.php
        modified:   project/resources/views/layouts/admin/sidebar.blade.php
        modified:   project/resources/views/layouts/front/footer.blade.php
        modified:   project/routes/web.php

	14 de octubre de 2023
		Explicacion Roles y Permisos laravel
			project\database\seeders\EmployeesTableSeeder.php
				1. Crea el permiso en la base de datos
					$createContactPerm = factory(Permission::class)->create([
				
				Loop - Para cada empleado
					2. Crea el empleado
						$employee = factory(Employee::class)->create([
					3. Crea el Role
						$super = factory(Role::class)->create([
					4. Asigna el permiso a un role
						$roleSuperRepo = new RoleRepository($super);
        				$roleSuperRepo->attachToPermission($createProductPerm);
						...
        				$employee->roles()->save($super);
	
	15 de octubre de 2023
		Explicacion de Ruta de actualizacion de los datos de Contact
			Opcion 1: Ingresando a http://localhost:8000/admin/contact/1/edit
				1. Parte de 
            		<form action="{{ route('admin.contact.update', $contact->id) }}" method="post" class="form" enctype="multipart/form-data">

                2. La ruta admin.contact.update como tal en web.php no esta explicitamente en web.php, pero si esta el admin.contact, el edit esta dentro del controlador
					Route::group(['prefix' => 'admin', 'middleware' => ['employee'], 'as' => 'admin.' ], function () {
					Route::namespace('Admin')->group(function () {
						Route::group(['middleware' => ['role:admin|superadmin|clerk, guard:employee']], function () {
							...
							...
							Route::namespace('Contact')->group(function () {
								Route::resource('contact', 'ContactController'); 
								Route::get('remove-image-contact', 'ContactController@removeImage')->name('contact.remove.image');
							});
				
				3. Esto lo conlleva a la funcion update del controlador
        			$this->middleware(['permission:update-contact, guard:employee'], ['only' => ['edit', 'update']]);
					...

					project\app\Http\Controllers\Admin\Contact\ContactController.php
						/**
						* Update the specified resource in storage.
						*
						* @param  UpdateContactRequest $request
						* @param  int $id 
						* 
						* @return RedirectResponse
						* @throws ContactUpdateErrorException
						*/
						public function update(UpdateContactRequest $request, int $id)
						{
							$contact = $this->contactRepo->findContactById($id);
							$contactRepo = new ContactRepository($contact);
							$data = $request->except('_token', '_method');
							if ($request->hasFile('cover') && $request->file('cover') instanceof UploadedFile) {
								$data['cover'] = $this->contactRepo->saveCoverImage($request->file('cover'));
							}
							$contactRepo->updateContact($data);
							return redirect()->route('admin.contact.edit', $contact->id)->with('message', 'Update successful');
						}
				4. Lo anterior retorna/redirige a la vista de actualizacion, dentro del mismo controlador
					/**
					* Display a listing of the resource.
					* @param  int $id 
					*
					* @return Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View
					*/
					public function edit($id)
					{
						$contact = $this->contactRepo->findContactById($id);

						return view('admin.contact.edit', [
							'contact' => $contact
						]);
					}

			Opcion 2: Ingresando a http://localhost:8000/admin/contact/
				1. Parte de 
            		<form action="{{ route('admin.contact.update', $contact->id) }}" method="post" class="form" enctype="multipart/form-data">

                2. La ruta admin.contact.update como tal en web.php no esta explicitamente en web.php, pero si esta el admin.contact, el edit esta dentro del controlador
					Route::group(['prefix' => 'admin', 'middleware' => ['employee'], 'as' => 'admin.' ], function () {
					Route::namespace('Admin')->group(function () {
						Route::group(['middleware' => ['role:admin|superadmin|clerk, guard:employee']], function () {
							...
							...
							Route::namespace('Contact')->group(function () {
								Route::resource('contact', 'ContactController'); 
								Route::get('remove-image-contact', 'ContactController@removeImage')->name('contact.remove.image');
							});
				
				3. Esto lo conlleva a la funcion update del controlador
        			$this->middleware(['permission:update-contact, guard:employee'], ['only' => ['index', 'update']]);
					...

					project\app\Http\Controllers\Admin\Contact\ContactController.php
						/**
						* Update the specified resource in storage.
						*
						* @param  UpdateContactRequest $request
						* @param  int $id 
						* 
						* @return RedirectResponse
						* @throws ContactUpdateErrorException
						*/
						public function update(UpdateContactRequest $request, int $id)
						{
							$contact = $this->contactRepo->findContactById($id);
							$contactRepo = new ContactRepository($contact);
							$data = $request->except('_token', '_method');
							if ($request->hasFile('cover') && $request->file('cover') instanceof UploadedFile) {
								$data['cover'] = $this->contactRepo->saveCoverImage($request->file('cover'));
							}
							$contactRepo->updateContact($data);
							return redirect()->route('admin.contact.index')->with('message', 'Update successful');
						}
				4. Lo anterior retorna/redirige a la vista de actualizacion, dentro del mismo controlador
					/**
					* Display a listing of the resource.
					*
					* @return Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View
					*/
					public function index()
					{
						$contact = $this->contactRepo->findContactById(1);

						return view('admin.contact.edit', [
							'contact' => $contact
						]);
					}


Tareas:
	1. Agregar en admin la vista/seccion para mostrar los datos de contacto
	2. Revisar/Actualizar la lógica del back de Contact. Dado que estaba usando funciones "viejas"
		de BaseRepository (tirsoElectronica v1). 
		(Listo) 2.1 Organizar project\resources\views\admin\contact\edit.blade.php
			(Listo) Admin.edit - Revisar que se actualice la informacion
			(Listo) Admin.edit - Subir cover no esta funcionando
			(Futuro) Admin.edit - Las notificaciones de que campos han sido actualizados
					(Listo) Admin.edit - La notificaciones de que ha sido actualizado
		(Listo) 2.2 localhost:8000/contact tiene error
		(Listo) 2.3 Crear roles para contacto
	3. Actualizar el Repositorio del shoppingcart (andresgarzonj/shoppingcart). Dado que en los 
		archivos aun tiene referencias a Jsdecena. (PasosInstalacion linea 108) 


john@doe.com / secret (role:superadmin)
admin@doe.com / secret (role:admin)
clerk@doe.com / secret (role:user)
php artisan serve

[Feat] Add contact.name_headquarter in db